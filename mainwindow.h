#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include "shared_define.h"
#include "gshared.h"
#include "cpoclist.h"
#include "editcustomipstxtwindow.h"
#include "cmdwindow.h"
#include "QRoundProgressBar.h"
#include "clog.h"
#include "settingwindow.h"
#include "setting.h"

#include <QListWidget>
#include <QMainWindow>
#include <QMenu>
#include <QProcess>
#include <QThread>




QT_BEGIN_NAMESPACE
namespace Ui { class MainWindow; }
QT_END_NAMESPACE

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = nullptr);
    ~MainWindow();

    //*用于主界面中显示刷选过的POC列表的数据*/
    CPocList _poclist_OBJ;

    //*填充数据：填充执行python脚本后的结果列表*/
    QList<PY_RESULT> _exec_py_script_result;

    //*新建一个进程来执行python脚本*/
    QProcess* p_exe_python_script_process;

    //*总共要执行的次数，用于统计进度*/
    int _scan_total_value;
    //*已经完成脚本执行的数量，用于统计进度*/
    int _scan_current_value;

    //*保存了起始ip和最终ip。主要用于扫描一个段的ip*/
    IP_SECTION _target_ip_section;

    /*
        在POC扫描时，用户可以选择是输入一个IP(段)或者通过内置的ips.txt来执行扫描操作。
        0：选择用输入的方式来确定IP。这是默认的选择。
        1：通过读取文本来执行扫描操作
    */
    int _target_mode = TARGET_IPS_SRC_KEY_IN;

    /**
      主窗口和其他窗口的交换
      _edit_ips_txt_window  ：   用于编辑ip列表的窗口
      _cmd_window           ：   控制台窗口，用于输入exp执行显示
      _setting_window       ：   设置窗口，用于程序的设置
      */
    EditCustomIpsTxtWindow  _edit_ips_txt_window;
    CMDWindow               _cmd_window;
    SettingWindow           _setting_window;
    Setting                 _setting;

    /**
        执行python脚本循环的线程的执行状态。
        如果这个值是0,则县城执行；如果这个值为1，则线程停止；如果这个值为2，则线程暂停(暂不实现)
    */
    int _exe_python_script_thread_status = 0;

    CLog* _p_logfile = nullptr;
    /**
        执行python的完整命令。
        用于过滤输出的日志。
        OnReadData函数会输出 [输入的命令] [cmd的回显] [脚本输出信息]
        我们只想要 [脚本输出的信息]，其他的信息过滤掉。
    */
    QString _py_cammand;
    QString _logdir;
    QString _hhost;
    /*
        是否处于用户模式
        在非用户模式下，部分槽函数会直接返回。
    */
    bool is_user_mode = false;


    /*
        结果表的右键菜单
        [执行exp]
    */
    QMenu _contextMenu_result_table;
    int _contextMenu_row = -1;
    int _contextMenu_col = -1;

signals:
    /**
     * @brief 更新[执行python程序后结果列表]的信号
     * @param row       该条记录插入在列表表中的行数
     * @param result    python脚本执行的结果
     */
    void signal_update_execute_python_script_result_table(PY_RESULT result);

    void signal_exe_pyscript_thread_finished();
private slots:
    /**
     * @brief 当筛选组件筛选条件的任意下拉框改变时，执行这个槽函数
     */
    void on_comboBox_currentTextChanged();

    /**
     * @brief 用户点击了 [检测] 按钮的槽函数
     * 主要解析了用户的输入，设置了 _target_ip_section 变量
     * 创建工作线程进行执行python代码
     */
    void on_btn_exe_poc_clicked();

    /**
     * @brief 当控制台有输出时，这个函数被调用。
     * 设计用于日志记录。
     */
    void OnReadData();

    /**
     * @brief 更新[执行python程序后结果列表]信号的槽函数
     * @param row       该条记录插入在列表表中的行数
     * @param result    python脚本执行的结果
     */
    void slot_on_update_execute_python_script_result_table(PY_RESULT result);

    /**
     * @brief 显示POC的列表中的某一项被点击了
     * @param item  被点击的项
     */
    void on_poc_lstw_itemClicked(QListWidgetItem *item);

    /**
     * @brief 当用户点击了菜单栏中的按钮，会调用这个函数。
     * @param 用户点击哪一个
     */
    void on_menu_list_itemClicked(QListWidgetItem *item);

    /**
     * @brief 当用户点击了筛选组件中的 [直接输入] 单选按钮时，执行该函数。
     * 为了设置target_mode，知道用户选择哪一种方式来确定主机。
     */
    void on_radio_input_string_clicked();

    /**
     * @brief 当用户点击了筛选组件中的 [从文本导入] 单选按钮时，执行该函数。
     * 为了设置target_mode，知道用户选择哪一种方式来确定主机。
     */
    void on_radio_text_file_clicked();

    /**
     * @brief 当工作线程执行完所有的python脚本后执行该函数。
     * 为了设置使[检测]按钮可用。
     */
    void on_exe_pyscript_thread_finished();

    /**
     * @brief 在执行检测时，用户点击了停止按钮
     */
    void on_btn_exe_stop_clicked();

    void on_settingwindow_log_comboBox_changed(SETTINGWINDOW_COMBOBOX_LOG status);
    void on_tbw_result_customContextMenuRequested(const QPoint &pos);

    /**
     * @brief 结果表右键菜单相应事件
     */
    void on_visit_web();
    void on_execute_exp();
private:
    Ui::MainWindow *ui;
    ////////////////////////////////////////////////////////

    /**
     * @brief 绑定信号和槽函数
     */
    void set_connection();
    /**
     * @brief 设置菜单列表
     */
    void set_list_button();

    /**
     * @brief 初始化主界面筛选条件的组件
     */
    void set_poc_filter();

    /**
     * @brief 设置poc列表信息
     * @param 保存POC列表的值
     */
    void set_poc_list_widget(QList<POC> poc_list);

    /**
     * @brief 更新poc列表信息
     * @param 保存最新POC列表的值
     */
    //void update_poc_list_widget(QList<POC> poc_list);

    /**
     * @brief 设置执行python脚本后的结果表
     */
    void set_result_table_widget();

    /**
     * @brief 根据用户的筛选条件更新POC列表
     */
    void update_filter_poc();


public:
    /**
     * @brief 执行python的单元
     * @param py_scrip_file 指定要执行的python脚本
     * @param python_version    选用python的版本
     * @param params            传递的参数（json脚本的路径 ip地址）
     * @return
     */
    int execute_python(QString py_scrip_file, int python_version, QString host, QString tag);
};
#endif // MAINWINDOW_H
