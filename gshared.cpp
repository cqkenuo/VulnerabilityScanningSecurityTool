#include "gshared.h"




QString GShared::program_path;

QString GShared::python2_path;
QString GShared::python3_path;
/////////////程序目录下//////////////////////
// 全局poc配置文件[gconfig.xml]
QString GShared::poc_xml_file;

// 程序目录下poc文件夹
QString GShared::program_poc_path;
// ip列表文件
// 程序目录/ipslist
QString GShared::program_ipslist_file;

// config.json所在的路径
QString GShared::program_poc_lib_configjson_file;

// 程序目录下，innertools文件夹
QString GShared::program_tools;

// 程序目录下，logs文件夹
QString GShared::program_logs;

QString GShared::poc_list_widget_title = QString::fromLocal8Bit("漏洞列表");

QFont GShared::ubuntu_font;

//菜单栏图标的初始化
QIcon GShared::menu_icon_main_normal;
QIcon GShared::menu_icon_main_clicked;
QIcon GShared::menu_icon_editIP_normal;
QIcon GShared::menu_icon_editIP_clicked;
QIcon GShared::menu_icon_console_normal;
QIcon GShared::menu_icon_console_clicked;
QIcon GShared::menu_icon_setting_normal;
QIcon GShared::menu_icon_setting_clicked;

QStringList GShared::sys_filter_list;
QStringList GShared::app_filter_list;
QStringList GShared::cms_filter_list;
QList<POC> GShared::filter_poc_list;
QList<POC> GShared::filter_poc_selected_list;
QList<PY_RESULT> GShared::exec_python_script_result_list;

GShared::GShared()
{
}

void GShared::init_gshared()
{
    program_path = QDir::currentPath();
    python2_path = program_path + "/pythonInterpreter/python27/python2.exe";
    python3_path = program_path + "/pythonInterpreter/python37/python3.exe";

    poc_xml_file = program_path + "/gconfig.xml";
    program_poc_path = program_path + "/poc/";
    program_ipslist_file = program_path + "/" + Q_FILE_NAME_IPS_LIST_TXT;
    program_poc_lib_configjson_file = program_poc_path + "lib/config.json";

    program_tools = program_path + "/innertools/";

    program_logs = program_path + "/logs/";

    //菜单栏图标的初始化
    menu_icon_main_normal = QIcon(GShared::program_path + "/src/" + MENU_ICON_MAIN_NORMAL);
    menu_icon_main_clicked = QIcon(GShared::program_path + "/src/" + MENU_ICON_MAIN_CLICKED);
    menu_icon_editIP_normal = QIcon(GShared::program_path + "/src/" + MENU_ICON_EDIT_IPS_TXT_NORMAL);
    menu_icon_editIP_clicked = QIcon(GShared::program_path + "/src/" + MENU_ICON_EDIT_IPS_TXT_CLICKED);
    menu_icon_console_normal = QIcon(GShared::program_path + "/src/" + MENU_ICON_CONSOLE_NORMAL);
    menu_icon_console_clicked = QIcon(GShared::program_path + "/src/" + MENU_ICON_CONSOLE_CLICKED);
    menu_icon_setting_normal = QIcon(GShared::program_path + "/src/" + MENU_ICON_SETTING_NORMAL);
    menu_icon_setting_clicked = QIcon(GShared::program_path + "/src/" + MENU_ICON_SETTING_CLICKED);

    QDir* dir = new QDir;
    if (!dir->exists(program_logs))
    {
        dir->mkdir(program_logs);
    }

    QString family = loadFontFamilyFromFiles("./src/nisof.ttf");
    ubuntu_font.setFamily(family);
    //ubuntu_font.setPointSize(12);
}

// 如果当前程序的路径大于150个字节返回false；
// 否则返回true。
// 用于检查程序所在的路径是否过深。
// 如果过深的话，就无法修改pip.exe中的python路径。
bool GShared::check_path_lenth(QWidget* widget)
{
    if (program_path.size() >= 130)
    {
        QMessageBox::information(widget, QString::fromLocal8Bit("too long"), QString::fromLocal8Bit("程序所在路径应小于150个字节p"));
        return false;
    }
    return true;
}

void GShared::modify_python2pipexe_file()
{
    long pip_exe_offset = 0x19002;
    QString pip_exe_path = program_path + "/pythonInterpreter/python27/Scripts/pip2.exe";
    
    //得到python2.exe的绝对路径，然后把这个路径写道pip2.exe中
    const char* p_p2_exe_path = python2_path.toStdString().c_str();

    FILE* pf_pipexe = fopen(pip_exe_path.toStdString().c_str(), "rb+");
    // 检查文件是否成功。
    if (pf_pipexe == nullptr)
    {
        return;
    }

    fseek(pf_pipexe, pip_exe_offset, SEEK_SET);
    fwrite(python2_path.toStdString().c_str(), strlen(p_p2_exe_path)+1, 1, pf_pipexe);
    fclose(pf_pipexe);
}

void GShared::modify_python3pipexe_file()
{
    long pip_exe_offset = 0x19002;
    QString pip_exe_path = program_path + "/pythonInterpreter/python37/Scripts/pip3.exe";

    //得到python3.exe的绝对路径，然后把这个路径写道pip3.exe中
    const char* p_p3_exe_path = python3_path.toStdString().c_str();

    FILE* pf_pipexe = fopen(pip_exe_path.toStdString().c_str(), "rb+");
    // 检查文件是否成功。
    if (pf_pipexe == nullptr)
    {
        return;
    }

    fseek(pf_pipexe, pip_exe_offset, SEEK_SET);
    fwrite(python3_path.toStdString().c_str(), strlen(p_p3_exe_path) + 1, 1, pf_pipexe);
    fclose(pf_pipexe);
}

QString GShared::get_datatime()
{
    QDateTime current_date_time = QDateTime::currentDateTime();
    return current_date_time.toString("MMddhhmmss");
}

QString GShared::loadFontFamilyFromFiles(const QString &fontFileName)
{
    static QHash<QString, QString> tmd;
    if (tmd.contains(fontFileName)) {
        return tmd.value(fontFileName);
    }
    QString font = "";
    QFile fontFile(fontFileName);
    qDebug() << "FONR FILE : " << fontFile.fileName();
    if(!fontFile.open(QIODevice::ReadOnly)) {
        qDebug()<<"Open font file error";
        return font;
    }

    int loadedFontID = QFontDatabase::addApplicationFontFromData(fontFile.readAll());
    QStringList loadedFontFamilies = QFontDatabase::applicationFontFamilies(loadedFontID);
    if(!loadedFontFamilies.empty()) {
        font = loadedFontFamilies.at(0);
    }
    fontFile.close();

    if (!(font.isEmpty()))
        tmd.insert(fontFileName, font);
    return font;
}
