#include "dialog_scanports.h"
#include "gshared.h"
#include "ui_dialog_scanports.h"

Dialog_ScanPorts::Dialog_ScanPorts(QWidget *parent) :
    QDialog(parent),
    ui(new Ui::Dialog_ScanPorts)
{
    ui->setupUi(this);

    ui->listView_hosts->setModel(&_list_model_hosts);
    ui->listView_ports->setModel(&_list_model);


    ui->listView_hosts->setStyleSheet(
        "QListView::item{height:40px;}"
        );
    ui->listView_ports->setStyleSheet(
        "QListView::item{height:30px;}"
        );

    
}

Dialog_ScanPorts::~Dialog_ScanPorts()
{
    delete ui;
}

void Dialog_ScanPorts::slot_readyReadHost(QString host)
{
    QStandardItem* item_host = new QStandardItem(host);

    _list_model_hosts.appendRow(item_host);
}

void Dialog_ScanPorts::slot_readyReadData(QString content)
{
    QStandardItem* item_procName = new QStandardItem(content);
    _list_model.appendRow(item_procName);
}

void Dialog_ScanPorts::on_button_startScanPorts_clicked()
{
    /*
        获取主机名,交给Python脚本执行.
        Python脚本会按照规则print端口信息,接收这部分信息显示到界面上.
    */

    _list_model_hosts.clear();
    _list_model.clear();

    WaitDialog *waitdialog = new WaitDialog();
    GShared::scan_port_thread._waitDialog = waitdialog;

    QString in_host = ui->lineEdit_host->text();

    bool isSuccess;
    QStringList ips = GShared::formatIP(in_host, &isSuccess);
    if (isSuccess)
    {
        GShared::scan_port_thread.set_hosts(ips);
    }
    else
    {
        NISOQBOX("IP错误", "请输入正确的IP.\n支持单IP:如172.1.1.1\n支持连续IP:如172.16.5.150-160");
        return;
    }

    QString host = in_host;
    GShared::scan_port_thread.set_host(host);
    GShared::start_scan_port_thread(this);

    waitdialog->exec();
}

void Dialog_ScanPorts::on_listView_hosts_clicked(const QModelIndex &index)
{
    qDebug() << "on_listView_hosts_clicked::";
    int row =  index.row();
    qDebug() << "row = " << row;
    //if (row == 0)
    //{
    //    return;
    //}
    _list_model.clear();
    qDebug() << "scan_port_result_list = " << GShared::scan_port_result_list.size();
    SCANPORTRESULT scanPortResult = GShared::scan_port_result_list.at(row);
    qDebug() << "host = " << scanPortResult.host;
    qDebug() << "port = " << scanPortResult.ports;
    for (QString port : scanPortResult.ports)
    {
        qDebug() << "port = " << port;
        _list_model.appendRow(new QStandardItem(port));
    }
}
