#include "cpoclist.h"
#include <QDomDocument>
#include <QTreeWidgetItem>
#include <QXmlStreamReader>
#include "gshared.h"

/**
 * @brief 得到xml项在 xml_name数组 对应的编号。如 传入[folder],返回2
 * @param xml_name的某一项
 * @return  在 xml_name 中的下标
 */
int CPocList::get_xml_name_idx(const char *in)
{
    unsigned int i = 0;
    for (i = 0; i < sizeof(xml_name)/sizeof(xml_name[0]); ++i)
    {
        if (!strcmp(in, xml_name[i]))
        {
            return i;
        }
    }
    return -1;
}

CPocList::CPocList()
{

}

/**
 * @brief 解析xml文件，转换成poc链表
 */
void CPocList::parse_poc_xml()
{
    // 打开或创建文件
    // 相对路径、绝对路径、资源路径都行
    // 打开文件 [config.xml]
    QFile file(GShared::poc_xml_file); 
    if (!file.open(QFile::ReadOnly))
    {
        // 打开文件失败。
        return;
    }

    QDomDocument doc;
    if (!doc.setContent(&file))
    {
        file.close();
        return;
    }
    file.close();

    // 返回根节点(niso)
    QDomElement root = doc.documentElement();

    // 根节点下的第一个标签(sys)
    QDomNode node = root.firstChild();          
    /*
        <sys>
            <item>windwows</item>
            <item>linux</item>
        </sys>
    */
    QDomElement sys_filter_note = node.toElement();
    QDomNodeList sys_list = sys_filter_note.childNodes();
    for (int i = 0; i < sys_list.count(); i++)
    {
        // 把解析出来的 sys 项 加入 全局的 sys_filter_list 链表
        GShared::sys_filter_list.push_back(sys_list.at(i).toElement().text());
    }

    // 根节点下的第二个标签(app)
    node = node.nextSibling();
    /*
        <app>
            <item>samba</item>
            <item>tomcat</item>
        </app>
    */
    QDomElement app_filter_note = node.toElement();
    QDomNodeList app_list = app_filter_note.childNodes();
    for (int i = 0; i < app_list.count(); i++)
    {
        // 把解析出来的 app 项 加入 全局的 app_filter_list 链表
        GShared::app_filter_list.push_back(app_list.at(i).toElement().text());
    }

    // 根节点下的第三个标签(app)
    node = node.nextSibling();
    /*
        <cms>
            <item>true</item>
            <item>false</item>
        </cms>
    */
    QDomElement cms_filter_note = node.toElement();
    QDomNodeList cms_list = cms_filter_note.childNodes();
    for (int i = 0; i < cms_list.count(); i++)
    {
        GShared::cms_filter_list.push_back(cms_list.at(i).toElement().text());
    }

    // 接下来，都是poc
    node = node.nextSibling();
    // 清空全局 poc列表
    GShared::filter_poc_list.clear();

    //如果节点不空
    while (!node.isNull())                              
    {
        //如果节点是元素
        if (node.isElement())                   
        {
            //转换为元素，注意元素和节点是两个数据结构，其实差不多
            QDomElement second_note = node.toElement(); 

            // 局部poc，最后加入全局 poc列表
            POC poc;

            // 遍历子元素，count和size都可以用,可用于标签数计数
            // 解析POC的各个属性，然后填入到 局部poc中
            QDomNodeList list = second_note.childNodes();
            for (int i = 0; i < list.count(); i++) 
            {
                switch (get_xml_name_idx(list.at(i).nodeName().toStdString().c_str()))
                {
                case XML_ARRAY_NAME://name
                    poc.name = list.at(i).toElement().text();
                    break;
                case XML_ARRAY_TAG://tag
                    poc.tag = list.at(i).toElement().text();
                    break;
                case XML_ARRAY_FOLDER://folder
                    poc.folder = list.at(i).toElement().text();
                    break;
                case XML_ARRAY_SYS://sys
                    poc.sys = list.at(i).toElement().text();
                    break;
                case XML_ARRAY_APP://app
                    poc.app = list.at(i).toElement().text();
                    break;
                case XML_ARRAY_CMS://cms
                    if (list.at(i).toElement().text().toLower() == "true")
                        poc.cms = "true";
                    else
                        poc.cms = "false";
                    break;
                case XML_ARRAY_DESCRIPTION:
                    poc.description = list.at(i).toElement().text();
                    break;
                case XML_ARRAY_PYVER:
                    poc.pyver = list.at(i).toElement().text();
                    break;
                case XML_ARRAY_EXPFILE:
                    poc.expfile = list.at(i).toElement().text();
                    break;
                }
            }

            // 加入全局 filter_poc_list
            GShared::filter_poc_list.push_back(poc);
        }

        // 下一个兄弟节点, nextSiblingElement()是下一个兄弟元素，都差不多
        node = node.nextSibling(); 
    }

    // 将解析出来的POC列表存入filter_poc_list和filter_poc_selected_list。
    GShared::filter_poc_selected_list = GShared::filter_poc_list;
}
