#include "thread_execute_exp.h"
#include "gshared.h"
#include <QDebug>

Thread_Execute_EXP::Thread_Execute_EXP(QObject *parent) : QObject(parent)
{

}


void Thread_Execute_EXP::start1()
{
    emit workStart();

    doWork();
}
void Thread_Execute_EXP::doWork()
{
    _sleep(2000);

    // 当开启监听后,这里执行exp
    // 创建一个进程用于执行python文件
    p_exe_python_script_process = new QProcess(this);

    // 执行python脚本的进程  -->  输出信息
    //qRegisterMetaType<CLog>("CLog");

    connect(p_exe_python_script_process, SIGNAL(readyReadStandardOutput()), this, SLOT(OnReadData()));
    //connect(p_exe_python_script_process, SIGNAL(readyReadStandardOutput()), this, SLOT(on_cmd_process_readoutput()));
    connect(p_exe_python_script_process, SIGNAL(readyReadStandardError()), this, SLOT(on_cmd_process_readerror()));
    // 打开一个cmd
    p_exe_python_script_process->start("cmd.exe");
    // 等待cmd打开完毕
    p_exe_python_script_process->waitForStarted();

    // 输入python命令，要求他启动指定脚本。
    p_exe_python_script_process->write(_cammand.toStdString().c_str());

    // 退出python环境
    p_exe_python_script_process->write("exit()\n");

    // 退出cmd
    p_exe_python_script_process->waitForFinished();
}

void Thread_Execute_EXP::OnReadData()
{
    QString out = QString::fromLocal8Bit(p_exe_python_script_process->readAllStandardOutput().toStdString().c_str());
    qDebug() << "Thread::OnReadData::>>>>>>>>" << out;
}

void Thread_Execute_EXP::on_cmd_process_readoutput()
{
    QTextCodec *GBK = QTextCodec::codecForName("GBK");
    //_cmd_process
    QString str = GBK->toUnicode(p_exe_python_script_process->readAllStandardOutput().data());
    qDebug() << "Thread_Execute_EXP::on_cmd_process_readoutput>>>>>>>>>>>>" << str;
}

void Thread_Execute_EXP::on_cmd_process_readerror()
{
    QTextCodec *GBK = QTextCodec::codecForName("GBK");
    //_cmd_process
    QString str = GBK->toUnicode(p_exe_python_script_process->readAllStandardError().data());
    qDebug() << "Thread_Execute_EXP::on_cmd_process_readerror>>>>>>>>>>>>" << str;
}


