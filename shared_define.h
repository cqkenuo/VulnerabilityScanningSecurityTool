#ifndef SHARED_DEFINE_H
#define SHARED_DEFINE_H


#include <QDateTime>
#include <QDesktopServices>
#include <QDir>
#include <QFile>
#include <QFontDatabase>
#include <QListWidget>
#include <QMainWindow>
#include <QMenu>
#include <QMessageBox>
#include <QObject>
#include <QProcess>
#include <QString>
#include <QTextStream>
#include <QTextCodec>
#include <QThread>
#include <QUrl>
#include <QHostAddress>
#include <QNetworkInterface>
#include <QJsonParseError>
#include <QJsonObject>
#include <QJsonArray>
#include <QStandardItem>
#include <QDomDocument>
#include <QTreeWidgetItem>
#include <QXmlStreamReader>

#include <string>
using std::string;


/**
    定义主界面ip段筛选的条件
    /24		A.B.C.1 ~ A.B.C.254
    /16		A.B.1.1 ~ A.B.254.254
*/
#define IP_SECTION_24 "/24"
#define IP_SECTION_16 "/16"

// 主窗口的标题
#define MAIN_WINDOW_TITLE "君立华域专项漏洞测试工具"

/*
    菜单按钮图标
    MENU_ICON_MAIN          ：主窗口按钮图标
    MENU_ICON_EDIT_IPS_TXT  ：编辑ip列表文本窗口图标
    MENU_ICON_CONSOLE       ：显示控制台按钮图标
    MENU_ICON_SETTING       ：显示配置按钮图标
*/
#define MENU_ICON_MAIN_NORMAL              "icon_main_normal.png"
#define MENU_ICON_MAIN_CLICKED              "icon_main_clicked.png"

#define MENU_ICON_EDIT_IPS_TXT_NORMAL       "icon_edit_ips_txt_normal.png"
#define MENU_ICON_EDIT_IPS_TXT_CLICKED       "icon_edit_ips_txt_clicked.png"

#define MENU_ICON_CONSOLE_NORMAL            "icon_console_normal.png"
#define MENU_ICON_CONSOLE_CLICKED            "icon_console_clicked.png"

#define MENU_ICON_SETTING_NORMAL            "icon_setting_normal.png"
#define MENU_ICON_SETTING_CLICKED            "icon_setting_clicked.png"

// 下拉菜单不选择的默认项
#define COMBOX_NO_CHOOSE            "None Choosed"

// 用户用哪一种方式来输入目标主机
// 用户可以选择在窗口上输入要检测IP/IP段
// 用户也可以编辑IP列表文本文件，检测文件中列出的目标主机
#define TARGET_IPS_SRC_KEY_IN       0
#define TARGET_IPS_SRC_TEXT_FILE    1

// 文件名定义
// ip列表文件
#define FILE_NAME_IPS_LIST_TXT  "ipslist"
#define Q_FILE_NAME_IPS_LIST_TXT QString::fromLocal8Bit(FILE_NAME_IPS_LIST_TXT)
// poc脚本所在的路径
#define PYTHON_SCRIPT_FOLDER "/pythonScript"

// 自定义超链接起始
#define CUSHREF_START         "nisolinkAS"
#define CUSHERF_END           "nisolinkAE"
#define STDHREF_START         "<a href="
#define STDHERF_END           "</a>"

// 扫描端口模块
// 输出格式
#define PRINT_FORMAT_SCANPORTS_START            "NISOPORTST"
#define PRINT_FORMAT_SCANPORTS_END              "NISOPORTED"

#define QSTR(s) QString::fromLocal8Bit(s)
#define NISOQBOX(title, content) QMessageBox::information(this, QString::fromLocal8Bit(title), QString::fromLocal8Bit(content));

// 定义日志是否开启
//#define SETTINGWINDOW_COMBOBOX_LOG_OFF  0
//#define SETTINGWINDOW_COMBOBOX_LOG_ON   1

#define XML_ARRAY_NAME              0
#define XML_ARRAY_TAG               1
#define XML_ARRAY_FOLDER            2
#define XML_ARRAY_SYS               3
#define XML_ARRAY_APP               4
#define XML_ARRAY_CMS               5
#define XML_ARRAY_PORTS             6
#define XML_ARRAY_DESCRIPTION       7
#define XML_ARRAY_PYVER             8
#define XML_ARRAY_EXPFILE           9
#define XML_ARRAY_VULNINFOFILE      10
struct POC
{
    QString name;                // poc的文件名
    QString folder;              // poc所在的文件夹
    QString tag;                 // 漏洞名
    QString sys;                 // 对应操作系统
    QString app;                 // 中间件
    QString cms;                 // 是否是cms
    QStringList ports;           // 端口号
    QString description;         // 描述信息
    QString pyver;               // python脚本所使用的python版本
    QString expfile;             // exp文件名
    QString vulnInfofile;        // 漏洞信息文件
};

struct PY_RESULT
{
    int idx;
    QString host;
    QString tag;
    QString result;
};

struct IP_SECTION
{
    int a_s;
    int b_s;
    int c_s;
    int d_s;
    int a_e;
    int b_e;
    int c_e;
    int d_e;
};

// 漏洞信息
struct VULNERABILITY_INFO
{
    POC pocInfo;
    PY_RESULT resultInfo;
};

enum SETTINGWINDOW_COMBOBOX_LOG
{
    off,
    on
};

struct SCANPORTRESULT
{
    QString host;
    QStringList ports;
};




#define XML_NODE_NAME           0
#define XML_NODE_TYPE           1
#define XML_NODE_RANK           2
#define XML_NODE_TIME           3
#define XML_NODE_EFFECT         4
#define XML_NODE_CATEGORY       5
#define XML_NODE_CVE            6
#define XML_NODE_DORK           7
#define XML_NODE_CASE           8
#define XML_NODE_REFER          9
#define XML_NODE_DESC           10
#define XML_NODE_VERIFY         11
#define XML_NODE_REPAIR         12
#define XML_NODE_PAYLOAD        13
#define XML_NODE_KEYWORD        14
struct VulnDetailInfo
{
    QString name;
    QString type;
    QString rank;
    QString time;
    QString effect;
    QString category;
    QString cve;
    QString dork;
    QString case_;
    QString refer;
    QString desc;
    QString verify;
    QString repair;
    QString payload;
    QString keyword;

    int getIdxByString(QString xml_key)
    {
        QMap<QString, int> map;
        map.insert("vuln_name", 0);
        map.insert("vuln_type", 1);
        map.insert("vuln_rank", 2);
        map.insert("vuln_time", 3);
        map.insert("vuln_effect", 4);
        map.insert("vuln_category", 5);
        map.insert("vuln_cve", 6);
        map.insert("vuln_dork", 7);
        map.insert("vuln_case", 8);
        map.insert("vuln_refer", 9);
        map.insert("vuln_desc", 10);
        map.insert("vuln_verify", 11);
        map.insert("vuln_repair", 12);
        map.insert("vuln_payload", 13);
        map.insert("vuln_keyword", 14);

        return map.value(xml_key);
    }
};

#endif // SHARED_DEFINE_H
