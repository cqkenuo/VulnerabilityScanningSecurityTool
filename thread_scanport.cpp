#include "thread_scanport.h"
#include "gshared.h"


THREAD_SCANPORT::THREAD_SCANPORT(QObject *parent) : QObject(parent)
{

}


void THREAD_SCANPORT::start1()
{
    emit workStart();

    doWork();
}
void THREAD_SCANPORT::doWork()
{
    /*
        针对主机ip进行循环
    */

    GShared::scan_port_result_list.clear();

    for (QString host : _hosts)
    {
        SCANPORTRESULT scanResult;
        scanResult.host = host;
        GShared::scan_port_result_list.push_back(scanResult);

        QString ccammand = GShared::python2_path + " " + GShared::program_path + "/zpyscript/port_scanner.py " + host + " " + GShared::program_path + "/ " + _range + " " + _thread_number + "\n";
        /*
            扫描端口逻辑:
            1. 新建一个cmd进程
            2. 用命令执行Python脚本
            3. 建立输入输出链接
            4. 关闭cmd
        */

        // 打开一个cmd
        _process_scanPorts.start("cmd.exe");
        connect(&_process_scanPorts, SIGNAL(readyReadStandardOutput()), this, SLOT(OnReadData()));

        // 等待cmd打开完毕
        _process_scanPorts.waitForStarted();

        // 输入python命令，要求他启动指定脚本。
        // 例如：>python.exe script.py jsonfile.json 172.16.5.113
        //QMessageBox::information(this, "cammand", py_cammand);
        _process_scanPorts.write(ccammand.toStdString().c_str());
        // 退出python环境
        _process_scanPorts.write("exit()\n");
        // 退出cmd
        _process_scanPorts.waitForFinished();

        emit signal_hostScanFinished(host);
    }
    _waitDialog->signal_havaFinished();
}

void THREAD_SCANPORT::OnReadData()
{
    QString out = QString::fromLocal8Bit(_process_scanPorts.readAllStandardOutput().toStdString().c_str());
    QStringList qstrings = out.split(PRINT_FORMAT_SCANPORTS_START);
    for (QString qstring : qstrings)
    {
        qDebug() << qstring;
        int idx = qstring.indexOf(PRINT_FORMAT_SCANPORTS_END);
        if (idx > 0)
        {
            QString hostSpacePort = qstring.left(idx);
            qDebug() << "hostSpacePort::"  << hostSpacePort;
            QStringList host_port = hostSpacePort.split(" ");
            QList<SCANPORTRESULT>::iterator it_bg = GShared::scan_port_result_list.begin();
            QList<SCANPORTRESULT>::iterator it_ed = GShared::scan_port_result_list.end();
            for (; it_bg != it_ed; it_bg++)
            {
                SCANPORTRESULT scan_result = *it_bg;
                qDebug() << "scan_result.port = " << scan_result.host;
                if (scan_result.host == host_port[0])
                    // 找到对应的记录
                {
                    it_bg->ports.push_back(host_port[1]);
                }
            }
        }
    }
}

void THREAD_SCANPORT::set_host(QString host)
{
    qDebug() << "set_host :: " << host;
    _host = host;
}

void THREAD_SCANPORT::set_hosts(QStringList hosts)
{
    _hosts = hosts;
}

void THREAD_SCANPORT::set_scan_range(QString range)
{
    _range = range;
}



